import { ChangeDetectionStrategy, ChangeDetectorRef, Input, ViewChildren } from '@angular/core';
import { Component } from '@angular/core';
import { Subject } from 'rxjs';
import { HOT_TOAST_DEFAULT_TIMEOUTS } from '../../constants';
import { resolveValueOrFunction, } from '../../hot-toast.model';
import { filter, takeUntil } from 'rxjs/operators';
import { HotToastComponent } from '../hot-toast/hot-toast.component';
export class HotToastContainerComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.toasts = [];
        this.toastRefs = [];
        this._offsetMargin = 8;
        this.subscriptionList = [];
        /** Subject for notifying the user that the toast has been closed. */
        this._onClosed = new Subject();
        this.onClosed$ = this._onClosed.asObservable();
    }
    trackById(index, toast) {
        return toast.id;
    }
    calculateOffset(toastId, position) {
        const visibleToasts = this.toasts.filter((t) => t.visible && t.position === position);
        const index = visibleToasts.findIndex((toast) => toast.id === toastId);
        const offset = index !== -1
            ? visibleToasts
                .slice(...(this.defaultConfig.reverseOrder ? [index + 1] : [0, index]))
                .reduce((acc, t) => acc + (t.height || 0) + this._offsetMargin, 0)
            : 0;
        return offset;
    }
    updateHeight(height, toast) {
        toast.height = height;
    }
    addToast(ref) {
        this.toastRefs.push(ref);
        let toast = ref.getToast();
        let subscription;
        this.toasts.push(ref.getToast());
        this.cdr.detectChanges();
        if (toast.observable) {
            ({ toast, subscription } = this.updateSubscription(toast, subscription));
            this.subscriptionList.push(subscription);
        }
        return {
            dispose: () => {
                if (subscription) {
                    subscription.unsubscribe();
                }
                this.closeToast(toast.id);
            },
            updateMessage: (message) => {
                toast.message = message;
                this.cdr.detectChanges();
            },
            updateToast: (options) => {
                this.updateToasts(toast, options);
                this.cdr.detectChanges();
            },
            afterClosed: this.getAfterClosed(toast),
        };
    }
    closeToast(id) {
        const comp = this.hotToastComponentList.find((item) => item.toast.id === id);
        if (comp) {
            comp.close();
        }
    }
    beforeClosed(toast) {
        toast.visible = false;
    }
    afterClosed(closeToast) {
        const toastIndex = this.toasts.findIndex((t) => t.id === closeToast.id);
        if (toastIndex > -1) {
            this._onClosed.next(closeToast);
            this.toasts = this.toasts.filter((t) => t.id !== closeToast.id);
            this.toastRefs = this.toastRefs.filter((t) => t.getToast().id !== closeToast.id);
            this.cdr.detectChanges();
        }
    }
    hasToast(id) {
        return this.toasts.findIndex((t) => t.id === id) > -1;
    }
    ngOnDestroy() {
        this.subscriptionList.forEach((s) => s.unsubscribe());
    }
    updateSubscription(toast, subscription) {
        subscription = toast.observable.pipe(takeUntil(this.getAfterClosed(toast))).subscribe((v) => {
            var _a, _b, _c;
            if ((_a = toast.observableMessages) === null || _a === void 0 ? void 0 : _a.next) {
                toast.message = resolveValueOrFunction(toast.observableMessages.next, v);
                toast = Object.assign(toast, Object.assign(Object.assign(Object.assign(Object.assign({}, toast), { type: 'success', duration: HOT_TOAST_DEFAULT_TIMEOUTS.success }), (_b = this.defaultConfig) === null || _b === void 0 ? void 0 : _b.success), (_c = toast) === null || _c === void 0 ? void 0 : _c.success));
                this.updateToasts(toast);
                this.cdr.detectChanges();
            }
        }, (e) => {
            var _a, _b, _c;
            if ((_a = toast.observableMessages) === null || _a === void 0 ? void 0 : _a.error) {
                toast.message = resolveValueOrFunction(toast.observableMessages.error, e);
                toast = Object.assign(toast, Object.assign(Object.assign(Object.assign(Object.assign({}, toast), { type: 'error', duration: HOT_TOAST_DEFAULT_TIMEOUTS.error }), (_b = this.defaultConfig) === null || _b === void 0 ? void 0 : _b.error), (_c = toast) === null || _c === void 0 ? void 0 : _c.error));
                this.updateToasts(toast);
                this.cdr.detectChanges();
            }
        });
        return { toast, subscription };
    }
    getAfterClosed(toast) {
        return this.onClosed$.pipe(filter((v) => v.id === toast.id));
    }
    updateToasts(toast, options) {
        this.toasts = this.toasts.map((t) => (Object.assign(Object.assign({}, t), (t.id === toast.id && Object.assign(Object.assign({}, toast), options)))));
    }
}
HotToastContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'hot-toast-container',
                template: "<div style=\"position: fixed; z-index: 9999; top: 0; right: 0; bottom: 0; left: 0; pointer-events: none\">\n  <div style=\"position: relative; height: 100%\">\n    <hot-toast\n      *ngFor=\"let toast of toasts; trackBy: trackById; let i = index\"\n      [toast]=\"toast\"\n      [offset]=\"calculateOffset(toast.id, toast.position)\"\n      [toastRef]=\"toastRefs[i]\"\n      (height)=\"updateHeight($event, toast)\"\n      (beforeClosed)=\"beforeClosed(toast)\"\n      (afterClosed)=\"afterClosed($event)\"\n    ></hot-toast>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
HotToastContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
HotToastContainerComponent.propDecorators = {
    defaultConfig: [{ type: Input }],
    hotToastComponentList: [{ type: ViewChildren, args: [HotToastComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,